services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: s3-commando-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: s3_commando
      POSTGRES_USER: s3_commando_user
      POSTGRES_PASSWORD: s3_commando_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U s3_commando_user -d s3_commando"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - s3-commando-network

  # Backend Server
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: s3-commando-server
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://s3_commando_user:s3_commando_password@postgres:5432/s3_commando
      - PORT=3001
      - FRONTEND_URL=http://localhost:8080
      - RESEND_API_KEY=${RESEND_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - s3-commando-network

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: s3-commando-frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - VITE_API_URL=http://localhost:3001
      - VITE_STRIPE_PUBLISHABLE_KEY=${VITE_STRIPE_PUBLISHABLE_KEY}
    ports:
      - "8080:80"
    depends_on:
      - server
    networks:
      - s3-commando-network

volumes:
  postgres_data:
    driver: local

networks:
  s3-commando-network:
    driver: bridge 